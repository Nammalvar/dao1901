// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"_secretary","type":"address"},{"name":"_president","type":"address"},{"name":"_treasurer","type":"address"}],"name":"setBureau","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_payed","type":"bool"},{"name":"_vote","type":"bool"}],"name":"createMember","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"memberId","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"members","outputs":[{"name":"memberSince","type":"uint256"},{"name":"payed","type":"bool"},{"name":"canVote","type":"bool"},{"name":"role","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"getMemberSince","outputs":[{"name":"memberSince","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"getMemberLength","outputs":[{"name":"size","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"getMemberCanVote","outputs":[{"name":"vote","type":"bool"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "606060405260008054600181018083559091908280158290116100595760020281600202836000526020600020918201910161005991905b8082111561014f576000815560018101805462ffffff19169055600201610037565b5050505060806040519081016040528042815260200160008152602001600081526020016004815260200150600060005060008154811015610002578080526000805160206106f5833981519152915050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff000019169190911790556101533360008060008054600160a060020a03851682526001602081905260408320829055810180835582908280158290116101b9578280526101b99060029081026000805160206106f583398151915290810191840201610037565b5090565b600160a060020a0333166000908152600160205260408120548154829190811015610002579080526002027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401805462ff00001916905561049990819061025c90396000f35b5050509050805060806040519081016040528042815260200184815260200183815260200160048152602001506000600050828154811015610002578180526002026000805160206106f5833981519152019050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff00001916919091179055505050505600606060405236156100615760e060020a60003504631b6b865681146100635780632ddb59da146100cf57806339106821146101505780635daf08ca14610168578063b49f4561146101c0578063d965ea00146101f6578063f550a4c41461020c575b005b61006160043560243560443533600160a060020a03166000908152600160205260408120548114806100c55750604081205481548291829181101561000257908052600202600080516020610479833981519152015462010000900460ff1614155b1561028357610002565b6100616004356024356044355b60008054600160a060020a03851682526001602081905260408320829055810180835582908280158290116103b3578280526103b3906002908102600080516020610459833981519152908101918402015b80821115610455576000815560018101805462ffffff1916905560020161012e565b6101fa60043560016020526000908152604090205481565b61024960043560008054829081101561000257508052600202600080516020610479833981519152810154600080516020610459833981519152909101549060ff808216916101008104821691620100009091041684565b6101fa6004356000600060005082815481101561000257505080526000805160206104598339815191526002820201545b919050565b6000545b60408051918252519081900360200190f35b61026f600435600060006000508281548110156100025750508052600281026000805160206104798339815191520154610100900460ff166101f1565b604080519485529215156020850152901515838301526060830152519081900360800190f35b604080519115158252519081900360200190f35b60025460ff1615156001141561029857610002565b6102a584600160016100dc565b600160a060020a038416600090815260016020819052604082205482549192918110156100025790805260020260008051602061047983398151915201805462ff00001916620100001790556102fd908490806100dc565b600160a060020a03831660009081526001602052604081205481546002929190811015610002579080520260008051602061047983398151915201805462ff0000191662020000179055610353826001806100dc565b600160a060020a0382166000908152600160205260408120548154600392919081101561000257908052600290810260008051602061047983398151915201805462ff0000191662030000179055805460ff191660011790555050505050565b505050905080506080604051908101604052804281526020018481526020018381526020016004815260200150600060005082815481101561000257818052600202600080516020610459833981519152019050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff0000191691909117905550505050565b509056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    unlinked_binary: "606060405260008054600181018083559091908280158290116100595760020281600202836000526020600020918201910161005991905b8082111561014f576000815560018101805462ffffff19169055600201610037565b5050505060806040519081016040528042815260200160008152602001600081526020016004815260200150600060005060008154811015610002578080526000805160206106f5833981519152915050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff000019169190911790556101533360008060008054600160a060020a03851682526001602081905260408320829055810180835582908280158290116101b9578280526101b99060029081026000805160206106f583398151915290810191840201610037565b5090565b600160a060020a0333166000908152600160205260408120548154829190811015610002579080526002027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401805462ff00001916905561049990819061025c90396000f35b5050509050805060806040519081016040528042815260200184815260200183815260200160048152602001506000600050828154811015610002578180526002026000805160206106f5833981519152019050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff00001916919091179055505050505600606060405236156100615760e060020a60003504631b6b865681146100635780632ddb59da146100cf57806339106821146101505780635daf08ca14610168578063b49f4561146101c0578063d965ea00146101f6578063f550a4c41461020c575b005b61006160043560243560443533600160a060020a03166000908152600160205260408120548114806100c55750604081205481548291829181101561000257908052600202600080516020610479833981519152015462010000900460ff1614155b1561028357610002565b6100616004356024356044355b60008054600160a060020a03851682526001602081905260408320829055810180835582908280158290116103b3578280526103b3906002908102600080516020610459833981519152908101918402015b80821115610455576000815560018101805462ffffff1916905560020161012e565b6101fa60043560016020526000908152604090205481565b61024960043560008054829081101561000257508052600202600080516020610479833981519152810154600080516020610459833981519152909101549060ff808216916101008104821691620100009091041684565b6101fa6004356000600060005082815481101561000257505080526000805160206104598339815191526002820201545b919050565b6000545b60408051918252519081900360200190f35b61026f600435600060006000508281548110156100025750508052600281026000805160206104798339815191520154610100900460ff166101f1565b604080519485529215156020850152901515838301526060830152519081900360800190f35b604080519115158252519081900360200190f35b60025460ff1615156001141561029857610002565b6102a584600160016100dc565b600160a060020a038416600090815260016020819052604082205482549192918110156100025790805260020260008051602061047983398151915201805462ff00001916620100001790556102fd908490806100dc565b600160a060020a03831660009081526001602052604081205481546002929190811015610002579080520260008051602061047983398151915201805462ff0000191662020000179055610353826001806100dc565b600160a060020a0382166000908152600160205260408120548154600392919081101561000257908052600290810260008051602061047983398151915201805462ff0000191662030000179055805460ff191660011790555050505050565b505050905080506080604051908101604052804281526020018481526020018381526020016004815260200150600060005082815481101561000257818052600202600080516020610459833981519152019050815181556020820151600191909101805460408401516060949094015162010000026101009490940260ff199190911690921761ff0019169190911762ff0000191691909117905550505050565b509056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    address: "0x848426ca721675888801bfe2c0f77f3c8de77d06",
    generated_with: "2.0.9",
    contract_name: "Dao1901"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Dao1901 = Contract;
  }

})();
