// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"_secretary","type":"address"},{"name":"_president","type":"address"},{"name":"_treasurer","type":"address"}],"name":"setBureau","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_payed","type":"bool"},{"name":"_vote","type":"bool"}],"name":"createMember","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"memberId","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"members","outputs":[{"name":"memberSince","type":"uint256"},{"name":"payed","type":"bool"},{"name":"canVote","type":"bool"},{"name":"role","type":"uint8"},{"name":"public_key","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"getMemberSince","outputs":[{"name":"memberSince","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"getMemberLength","outputs":[{"name":"size","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"getMemberCanVote","outputs":[{"name":"vote","type":"bool"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "6060604052600080546002810180835591908290801582901161005c5760020281600202836000526020600020918201910161005c91905b808211156101a857848155600181018054600160b860020a0319169055600201610037565b5050610100604052426060908152608082905260a0829052600460c05260e08290528154909250819081101561000257508054818052427f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638190557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564805462ffffff19166204000017630100000060b860020a03191690556101a06040526101009081526101208390526101408390526101608390523361018052925060019081101561000257427f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5668054600160b860020a03191663010000003390810291909117909155600160a060020a0316825260208190526040822055610560915081906101ac90396000f35b509056606060405236156100615760e060020a60003504631b6b865681146100635780632ddb59da146100d0578063391068211461013d5780635daf08ca14610155578063b49f4561146101be578063d965ea00146101f4578063f550a4c41461020a575b005b61006160043560243560443533600160a060020a03166000908152600160205260408120548114806100c55750604081205481548291829181101561000257908052600202600080516020610540833981519152015462010000900460ff1614155b156102f057506102eb565b6100616004356024356044355b33600160a060020a0316600090815260016020526040812054811480610133575060408120548154600491839181101561000257908052600202600080516020610540833981519152015462010000900460ff16145b156104935761048d565b6101f860043560016020526000908152604090205481565b61024760043560008054829081101561000257508052600202600080516020610540833981519152810154600080516020610520833981519152909101549060ff8082169161010081048216916201000082041690600160a060020a0363010000009091041685565b6101f86004356000600060005082815481101561000257505080526000805160206105208339815191526002820201545b919050565b6000545b60408051918252519081900360200190f35b61027b600435600060006000508281548110156100025750508052600281026000805160206105408339815191520154610100900460ff166101ef565b604080519586529315156020860152911515848401526060840152600160a060020a03166080830152519081900360a00190f35b604080519115158252519081900360200190f35b600160a060020a0382166000908152600160205260408120548154600392919081101561000257908052600290810260008051602061054083398151915201805462ff0000191662030000179055805460ff1916600117905550505b505050565b60025460ff1615156001141561030657506102eb565b61031384600160016100dd565b600160a060020a038416600090815260016020819052604082205482549192918110156100025790805260020260008051602061054083398151915201805462ff000019166201000017905561036b908490806100dd565b600160a060020a03831660009081526001602052604081205481546002929190811015610002579080520260008051602061054083398151915201805462ff000019166202000017905561028f826001806100dd565b5050509050805060a06040519081016040528042815260200184815260200183815260200160048152602001338152602001506000600050828154811015610002578180526002026000805160206105208339815191520190508151815560208201516001919091018054604084015160608501516080959095015163010000000262010000959095026101009190910260ff199290921690931761ff0019161762ff000019169190911776ffffffffffffffffffffffffffffffffffffffff00000019169190911790555b50505050565b60008054600160a060020a0386168252600160208190526040832082905581018083559091908280158290116103c1578280526103c1906002908102600080516020610520833981519152908101918402015b8082111561051c576000815560018101805476ffffffffffffffffffffffffffffffffffffffffffffff191690556002016104e6565b509056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564",
    unlinked_binary: "6060604052600080546002810180835591908290801582901161005c5760020281600202836000526020600020918201910161005c91905b808211156101a857848155600181018054600160b860020a0319169055600201610037565b5050610100604052426060908152608082905260a0829052600460c05260e08290528154909250819081101561000257508054818052427f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638190557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564805462ffffff19166204000017630100000060b860020a03191690556101a06040526101009081526101208390526101408390526101608390523361018052925060019081101561000257427f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5668054600160b860020a03191663010000003390810291909117909155600160a060020a0316825260208190526040822055610560915081906101ac90396000f35b509056606060405236156100615760e060020a60003504631b6b865681146100635780632ddb59da146100d0578063391068211461013d5780635daf08ca14610155578063b49f4561146101be578063d965ea00146101f4578063f550a4c41461020a575b005b61006160043560243560443533600160a060020a03166000908152600160205260408120548114806100c55750604081205481548291829181101561000257908052600202600080516020610540833981519152015462010000900460ff1614155b156102f057506102eb565b6100616004356024356044355b33600160a060020a0316600090815260016020526040812054811480610133575060408120548154600491839181101561000257908052600202600080516020610540833981519152015462010000900460ff16145b156104935761048d565b6101f860043560016020526000908152604090205481565b61024760043560008054829081101561000257508052600202600080516020610540833981519152810154600080516020610520833981519152909101549060ff8082169161010081048216916201000082041690600160a060020a0363010000009091041685565b6101f86004356000600060005082815481101561000257505080526000805160206105208339815191526002820201545b919050565b6000545b60408051918252519081900360200190f35b61027b600435600060006000508281548110156100025750508052600281026000805160206105408339815191520154610100900460ff166101ef565b604080519586529315156020860152911515848401526060840152600160a060020a03166080830152519081900360a00190f35b604080519115158252519081900360200190f35b600160a060020a0382166000908152600160205260408120548154600392919081101561000257908052600290810260008051602061054083398151915201805462ff0000191662030000179055805460ff1916600117905550505b505050565b60025460ff1615156001141561030657506102eb565b61031384600160016100dd565b600160a060020a038416600090815260016020819052604082205482549192918110156100025790805260020260008051602061054083398151915201805462ff000019166201000017905561036b908490806100dd565b600160a060020a03831660009081526001602052604081205481546002929190811015610002579080520260008051602061054083398151915201805462ff000019166202000017905561028f826001806100dd565b5050509050805060a06040519081016040528042815260200184815260200183815260200160048152602001338152602001506000600050828154811015610002578180526002026000805160206105208339815191520190508151815560208201516001919091018054604084015160608501516080959095015163010000000262010000959095026101009190910260ff199290921690931761ff0019161762ff000019169190911776ffffffffffffffffffffffffffffffffffffffff00000019169190911790555b50505050565b60008054600160a060020a0386168252600160208190526040832082905581018083559091908280158290116103c1578280526103c1906002908102600080516020610520833981519152908101918402015b8082111561051c576000815560018101805476ffffffffffffffffffffffffffffffffffffffffffffff191690556002016104e6565b509056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564",
    address: "0xa8d7a9504a9b3ca196a892ddfd98b7dc42b24ed2",
    generated_with: "2.0.9",
    contract_name: "Dao1901"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Dao1901 error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Dao1901 = Contract;
  }

})();
