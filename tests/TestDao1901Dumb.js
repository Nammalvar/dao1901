// Retrieve the current list of members
function memberList(daoMembers) {
    var members = [];
    var addr = daoMembers.head();
    while (addr != 0) {
        if (daoMembers.isMember.call(addr)) {
            members.push(addr)
        }
        addr = daoMembers.subscriptions(addr)[1]; // Access with .next ?
    }
    return members;
}

// Retrieve the votes
function voteList(daoVote, voteId) {
    var votes = [];
    var addr = daoVote.proposals(voteId)[2]; // vote list head
    while (addr != 0) {
        v = daoVote.getVote(voteId, addr);
        votes.push(v[0]);
        addr = v[1];
    }
    return votes;
}

// Security best practices ftw
function unlockAllAccounts(){
    for (i = 0; i < eth.accounts.length; i++) {
        personal.unlockAccount(eth.accounts[i], "", 3600);
    }
}

function assert(condition, message) {
    if (!condition) throw message;
}

// We want 3 accounts for our tests
while (eth.accounts.length < 3) {
    console.log("Creating test account...");
    personal.newAccount(""); // Empty passphrase
}

// Set account to receive ether (mining earns) 
miner.setEtherbase(eth.accounts[0]);

// Start the miner to validate all the transactions below
miner.start(3);

// Security best practices ftw
unlockAllAccounts()

var alice = eth.accounts[0];
var bob = eth.accounts[1];
var carol = eth.accounts[2];

admin.sleepBlocks(1); // block reward for alice 

// Alice sends some ether to bob and carol, so everybody will have ether and the possibility to send transactions
eth.sendTransaction({from:alice, to:bob, value: web3.toWei(1, "ether")})
eth.sendTransaction({from:alice, to:carol, value: web3.toWei(1, "ether")})
admin.sleepBlocks(3);

// Generated by compile.py
loadScript('Dao1901Members.js');
loadScript('Dao1901Votes.js');

// needs to be called manually for now :'-(
function runMemberTests() {
    assert(daoMembers.address, "contract is not deployed");
    assert(daoMembers.owner() == alice, "first owner is not contract creator");
    assert(daoMembers.head() == 0x00, "members list head is not correctly initialized")

    assert(!daoMembers.isMember.call(bob), "Bob is a DAO member before subscribing")

    // subscribe account 1 for 1 year
    console.log('Owner adds a member...')
    daoMembers.subscribe.sendTransaction(bob, 1, {from:alice});
    admin.sleepBlocks(3);
    assert(daoMembers.isMember.call(bob), "Bob is not a DAO member after subscribing");

    // owner revoke a member
    console.log('Owner revokes a member...')
    daoMembers.subscribe.sendTransaction(bob, 0, {from:alice}); // Subscription ends now
    admin.sleepBlocks(3);
    assert(!daoMembers.isMember.call(bob), "Bob is still a member after revokation");

    // Retrieve the list of subscribers
    console.log('Owner renews subscription and adds a member...')
    daoMembers.subscribe.sendTransaction(bob, 1, {from:alice}); // renew subscription
    daoMembers.subscribe.sendTransaction(carol, 1, {from:alice}); // add account 2
    admin.sleepBlocks(3);
    assert(daoMembers.isMember.call(bob), "Bob is not a DAO member after renewal");
    assert(daoMembers.isMember.call(carol), "Carol is not a DAO member after subscribing");

    var members = memberList(daoMembers);
    assert(members.length == 2, "Dao should have 2 members")
    assert(members.indexOf(bob) != -1, "Bob should be a member")
    assert(members.indexOf(carol) != -1, "Carol should be a member")

    // Revoke head() and retrieve list
    console.log('Owner revokes head()...')
    daoMembers.subscribe.sendTransaction(daoMembers.head(), 0, {from:alice});
    admin.sleepBlocks(3);

    var members = memberList(daoMembers);
    assert(members.length == 1, "Dao should have 1 members")
    assert(members.indexOf(bob) != -1, "Bob should be a member")
    assert(members.indexOf(carol) == -1, "Carol should not be a member")

    // Accces control
    console.log('Non-owner tries to insert a subscription...')
    daoMembers.subscribe.sendTransaction(carol, 10, {from:carol});
    admin.sleepBlocks(3);
    assert(!daoMembers.isMember.call(carol), "non-owners was able to add a member");

    console.log('Non-owner tries to transfer ownership...')
    daoMembers.changeOwner.sendTransaction(carol, {from:carol});
    admin.sleepBlocks(3);
    assert(daoMembers.owner() == alice, "non-owner was able to transfer ownership");

    // Transfer ownership
    console.log('Owner transfer ownership...')
    daoMembers.changeOwner.sendTransaction(bob, {from:alice});
    admin.sleepBlocks(3);
    assert(daoMembers.owner() == bob, "ownership was not transfered to Bob");

    // new owner subscribes
    console.log('New owner adds a member...')
    assert(!daoMembers.isMember.call(carol), "Carol should not be a member");
    daoMembers.subscribe.sendTransaction(carol, 1, {from:bob});
    admin.sleepBlocks(3);
    assert(daoMembers.isMember.call(carol), "Carol was not added by new owner");

    return 'DAO 1901 - Members - OK';
};

function runVoteTests(daoVotes) {

    console.log('voting dao initialization...');
    assert(daoVotes.owner() == alice, 'invalid vote contract owner');
    assert(daoVotes.membersContract() != 0,
           'Vote contract is lacking a members contract');

    daoMembers = Dao1901MembersContract.at(daoVotes.membersContract());

    // Make sure alice & bob are the only members
    daoMembers.subscribe.sendTransaction(alice, 1, {from:alice});
    daoMembers.subscribe.sendTransaction(bob, 1, {from:alice});
    daoMembers.subscribe.sendTransaction(carol, 0, {from:alice});
    admin.sleepBlocks(3);

    // non-owner tries to create a proposal
    console.log('non-owner tries to create a proposal...');
    assert(daoVotes.nVotes() == 0, 'vote contract initilized with non zero votes');
    daoVotes.createProposal.sendTransaction('Merguez or Chipo ?', 7, {from:carol});
    admin.sleepBlocks(3);
    assert(daoVotes.nVotes() == 0, 'non owner could create a vote');

    // owner creates a proposal
    console.log('creating a proposal...')
    daoVotes.createProposal.sendTransaction('Merguez or Chipo ?', 7, {from:alice});
    admin.sleepBlocks(3);
    assert(daoVotes.nVotes() == 1, 'proposal creation failed');
    assert(daoVotes.proposals(1)[0] == 'Merguez or Chipo ?',
           'proposal description incorrect');

    // carol tries to vote
    console.log('simple vote...');
    daoVotes.vote.sendTransaction(1, 'Chipo', {from:alice});
    daoVotes.vote.sendTransaction(1, 'Merguez', {from:bob});
    daoVotes.vote.sendTransaction(1, 'Brochette', {from:carol});
    admin.sleepBlocks(3);
    var votes = voteList(daoVotes, 1);
    assert(votes.length == 2, "Vote 1 should have 2 votes")
    assert(votes.indexOf('Merguez') != -1, "Merguez vote not recorded")
    assert(votes.indexOf('Chipo') != -1, "Chipo vote not recorded")

    // voting twice updates the previous vote
    console.log('update vote...');
    daoVotes.createProposal.sendTransaction('Fork or Fork ?', 7, {from:alice});
    admin.sleepBlocks(3);
    daoVotes.vote.sendTransaction(2, 'Fork', {from:alice});
    daoVotes.vote.sendTransaction(2, 'Fork', {from:bob});
    admin.sleepBlocks(3);
    daoVotes.vote.sendTransaction(2, 'No Fork', {from:alice});
    admin.sleepBlocks(3);

    votes = voteList(daoVotes, 2);
    assert(votes.indexOf('No Fork') != -1, "alice vote was not updated");

    // expired vote
    console.log('expired vote...');
    daoVotes.createProposal.sendTransaction(
        'gege, pense aux cles du camion', 0, {from:alice});
    admin.sleepBlocks(3);
    daoVotes.vote.sendTransaction(3, 'foo', {from:alice});
    daoVotes.vote.sendTransaction(3, 'bar', {from:bob});
    admin.sleepBlocks(3);
    votes = voteList(daoVotes, 3);
    assert(votes.length == 0, "vote was not expired");

    // empty choice is invalid
    console.log('empty choice...');
    daoVotes.createProposal.sendTransaction('eggs, bacon or spam ?', 7, {from:alice});
    admin.sleepBlocks(3);
    daoVotes.vote.sendTransaction(4, '', {from:alice});
    assert(votes.length == 0, "empty choice was accepted");

    // list proposals
    console.log('listing proposals...');
    for (i = 1; i <= daoVotes.nVotes(); i++) {
        assert(daoVotes.proposals(i)[1] != 0, 'invalid proposal')
    }

    return 'DAO 1901 - Votes - OK';
}
